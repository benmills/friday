import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import MemorySourceTags from "~/components/MemorySourceTags";
import MemorySourceTag from "~/components/MemorySourceTag";
import UserInput from "~/components/UserInput";
import { useEffect, useRef } from "react";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  return (
    <>
      <Head>
        <title>Friday</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex align-start justify-start min-h-screen min-w-screen flex-col bg-[#000000] text-[#ffffff]">
        <div className="flex flex-col gap-2 p-2" data-name="terminal">
          <ul className="flex flex-col">
            <li>What is Friday?</li>
            <li className="flex flex-col gap-2">
              Friday Chat is a multi-agent chat application that utilizes GPT to provide users with a seamless and informative conversational experience. The app is designed to assist users in various tasks by connecting them with specialized chat agents, all while maintaining an easy-to-use interface.
              <MemorySourceTags>
                <MemorySourceTag source={{ tag: "Wikipedia", href: "https://en.wikipedia.org/wiki/GPT-3" }} />
                <MemorySourceTag source={{ tag: "OpenAI", href: "https://openai.com/blog/openai-api/" }} />
              </MemorySourceTags>
            </li>
          </ul>
          <UserInput ref={inputRef} />
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
